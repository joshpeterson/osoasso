#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import make_nacl_env
import nacl_utils
import os

def LocalNaClTestProgram(env,
                    test_sources,
                    arch_spec,
                    module_name='nacl_test',
                    target_name='test'):
  '''This is a copy of the nacl tools method with some modifications:
    - Build in release instead of debug
  '''

  arch, subarch = nacl_utils.GetArchFromSpec(arch_spec)
  # Create multi-level dictionary for sel_ldr binary name.
  NACL_SEL_LDR = {'x86' :
                   {'32': '$NACL_SEL_LDR32',
                    '64': '$NACL_SEL_LDR64'
                   }
                 }
  NACL_IRT_CORE = {'x86' :
                    {'32': '$NACL_IRT_CORE32',
                     '64': '$NACL_IRT_CORE64'
                    }
                  }
  arch_sel_ldr = NACL_SEL_LDR[arch][subarch]
  # if |arch| and |subarch| are not found, a KeyError exception will be
  # thrown, which will generate a stack trace for debugging.
  test_program = nacl_utils.MakeNaClModuleEnvironment(
                     env,
                     test_sources,
                     module_name,
                     arch_spec,
                     is_debug=False,
                     dir_prefix='test_')
  test_node = env.Alias(target_name,
                        source=test_program,
                        action=arch_sel_ldr +
                               ' -B %s' % NACL_IRT_CORE[arch][subarch] +
                               ' $SOURCE')
  # Tell SCons that |test_node| never goes out of date, so that you don't see
  # '<test_node> is up to date.'
  env.AlwaysBuild(test_node)

nacl_env = make_nacl_env.NaClEnvironment(use_c_plus_plus_libs=True, nacl_platform='pepper_15')
nacl_env.Append(
    # Add a CPPPATH that enables the full-path #include directives, such as
    # #include "examples/sine_synth/sine_synth.h"
    CPPPATH=[os.path.dirname(os.path.dirname(os.getcwd()))],
    CCFLAGS=['-Wall', '-Wno-long-long', '-pthread', '-Werror', '-std=c++0x'],
   )

sources = ['src/osoasso.cc',
           'src/osoasso_instance.cc',
           'src/sha1.cc',
           'src/commit.cc',
           'src/tag_repository.cc',
           'src/command_parser.cc',
           'src/command_factory.cc',
           'src/command_dispatcher.cc',
           'src/commit_factory.cc',
           'src/project_manager.cc',
           'src/add.cc',
           'src/subtract.cc',
           'src/multiply.cc',
           'src/random.cc']

test_sources = ['test_harness/test.cc',
                'test/test_blob.cc',
                'test/test_sha1.cc',
                'test/test_commit.cc',
                'test/test_object_repository.cc',
                'test/test_tag_repository.cc',
                'test/test_command_parser.cc',
                'test/test_matrix.cc',
                'test/test_matrix_iterator.cc',
                'test/test_matrix_parser.cc',
                'test/test_matrix_builder.cc',
                'test/test_matrix_blobber.cc',
                'test/test_matrix_iterator_with_size.cc',
                'test/test_matrix_formatter.cc',
                'test/test_double_equal.cc',
                'test/test_command_factory.cc',
                'test/test_command_dispatcher.cc',
                'test/test_tree.cc',
                'test/test_commit_factory.cc',
                'test/test_project_manager.cc',
                'test/test_osoasso_instance.cc',
                'test/test_add.cc',
                'test/test_subtract.cc',
                'test/test_multiply.cc',
                'test/test_random.cc']

test_sources += sources

stress_test_sources = ['test_harness/stress_test.cc',
					   'test/stress_test_blob.cc',
                       'test/stress_test_multiply.cc']

stress_test_sources += sources
                        
nacl_env.AllNaClModules(sources, 'osoasso')

nacl_test_32 = nacl_env.Clone()
LocalNaClTestProgram(nacl_test_32, test_sources,
                             nacl_utils.ARCH_SPECS['x86-32'],
                             module_name='osoasso_test',
                             target_name='test32')

nacl_test_64 = nacl_env.Clone()
LocalNaClTestProgram(nacl_test_64, test_sources,
                             nacl_utils.ARCH_SPECS['x86-64'],
                             module_name='osoasso_test',
                             target_name='test64')

nacl_stress_test_32 = nacl_env.Clone()
LocalNaClTestProgram(nacl_stress_test_32, stress_test_sources,
                             nacl_utils.ARCH_SPECS['x86-32'],
                             module_name='osoasso_stress_test',
                             target_name='stress_test32')

nacl_stress_test_64 = nacl_env.Clone()
LocalNaClTestProgram(nacl_stress_test_64, stress_test_sources,
                             nacl_utils.ARCH_SPECS['x86-64'],
                             module_name='osoasso_stress_test',
                             target_name='stress_test64')

# This target is used by the SDK build system to provide a prebuilt version
# of the example in the SDK installer.
#nacl_env.InstallPrebuilt('hello_world')

