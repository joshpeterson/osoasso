# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#
# GNU Make based build file.  For details on GNU Make see:
#   http://www.gnu.org/software/make/manual/make.html
#
#

# Default configuration
#
# By default we will build a Debug configuration using the GCC newlib toolcahin
# to override this, specify TOOLCHAIN=newlib|glibc or CONFIG=Debug|Release on
# the make command-line or in this file prior to including common.mk.  The
# toolchain we use by default will be the first valid one listed
VALID_TOOLCHAINS:=emscripten newlib pnacl

# Really, this library shouldn't be built for newlib, but it makes the build simpler.

PEPPERJS_SRC_ROOT:=../development/pepper.js
EXTRA_INC_PATHS=
include $(PEPPERJS_SRC_ROOT)/tools/common.mk

#
# Target Name
#
# The base name of the final library, also the name of the NMF file containing
# the mapping between architecture and actual NEXE.
#
TARGET=osoasso

CFLAGS = -Wall -Wno-long-long -pthread -Werror -std=gnu++11 -O2
#
# List of sources to compile
#
SOURCES =	$(CURDIR)/src/osoasso.cc\
			$(CURDIR)/src/osoasso_instance.cc\
			$(CURDIR)/src/sha1.cc\
			$(CURDIR)/src/commit.cc\
			$(CURDIR)/src/tag_repository.cc\
			$(CURDIR)/src/command_parser.cc\
			$(CURDIR)/src/command_factory.cc\
			$(CURDIR)/src/command_dispatcher.cc\
			$(CURDIR)/src/commit_factory.cc\
			$(CURDIR)/src/project_manager.cc\
			$(CURDIR)/src/help_manager.cc\
			$(CURDIR)/src/log.cc\
			$(CURDIR)/src/add.cc\
			$(CURDIR)/src/subtract.cc\
			$(CURDIR)/src/multiply.cc\
			$(CURDIR)/src/random.cc\
			$(CURDIR)/src/transpose.cc\
			$(CURDIR)/src/random_symmetric.cc\
			$(CURDIR)/src/identity.cc\
			$(CURDIR)/src/jacobi_eigen_solver.cc
# Note: absolute path to help Emscripten source mapping.

#
# List of libraries to link against.  Unlike some tools, the GCC and LLVM
# based tools require libraries to be specified in the correct order.  The
# order should be symbol reference followed by symbol definition, with direct
# sources to the link (object files) are left most.  In this case:
#    hello_world -> ppapi_main -> ppapi_cpp -> ppapi -> pthread -> libc
# Notice that libc is implied and come last through standard compiler/link
# switches.
#
# We break this list down into two parts, the set we need to rebuild (DEPS)
# and the set we do not.  This example does not havea any additional library
# dependencies.
#
LIBS=pthread

#
# Use the compile macro for each source.
#
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

#
# Use the link macro for this target on the list of sources.
#
ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

#
# Specify the NMF to be created with no additional arugments.
#
$(eval $(call NMF_RULE,$(TARGET),))

