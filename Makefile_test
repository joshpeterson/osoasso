VALID_TOOLCHAINS := pnacl newlib glibc

NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../development/nacl_sdk/pepper_33)
include $(NACL_SDK_ROOT)/tools/common.mk

LIBS = ppapi_cpp ppapi
#CFLAGS = -Wall -Wno-long-long -pthread -Werror -std=c++0x -O2
# Use gnu++11 for pnacl
CFLAGS = -Wall -Wno-long-long -pthread -Werror -std=gnu++11 -O2 --pnacl-exceptions=sjlj
LDFLAGS = --pnacl-exceptions=sjlj

TARGET = osoasso_test
SOURCES = 	src/osoasso_instance.cc\
			src/sha1.cc\
			src/commit.cc\
			src/tag_repository.cc\
			src/command_parser.cc\
			src/command_factory.cc\
			src/command_dispatcher.cc\
			src/commit_factory.cc\
			src/project_manager.cc\
			src/help_manager.cc\
			src/add.cc\
			src/subtract.cc\
			src/multiply.cc\
			src/random.cc\
			src/transpose.cc\
			src/random_symmetric.cc\
			src/identity.cc\
			src/jacobi_eigen_solver.cc\
			test_harness/test.cc\
			test/test_blob.cc\
			test/test_sha1.cc\
			test/test_commit.cc\
			test/test_string_splitter.cc\
			test/test_object_repository.cc\
			test/test_tag_repository.cc\
			test/test_command_parser.cc\
			test/test_matrix.cc\
			test/test_matrix_element_iterator.cc\
			test/test_matrix_row_iterator.cc\
			test/test_matrix_column_iterator.cc\
			test/test_matrix_parser.cc\
			test/test_matrix_builder.cc\
			test/test_matrix_blobber.cc\
			test/test_matrix_iterator_with_size.cc\
			test/test_matrix_formatter.cc\
			test/test_double_equal.cc\
			test/test_command_factory.cc\
			test/test_command_dispatcher.cc\
			test/test_tree.cc\
			test/test_commit_factory.cc\
			test/test_project_manager.cc\
			test/test_help_manager.cc\
			test/test_osoasso_instance.cc\
			test/test_parallel_task.cc\
			test/test_max_off_diagonal_index.cc\
			test/test_print_matrix.cc\
			test/test_add.cc\
			test/test_subtract.cc\
			test/test_multiply.cc\
			test/test_random.cc\
			test/test_transpose.cc\
			test/test_random_symmetric.cc\
			test/test_identity.cc\
			test/test_jacobi_eigen_solver.cc

# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS), $(LDFLAGS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS), %(LDFLAGS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
